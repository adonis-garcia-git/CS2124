class Playlist {
public:
    Playlist(const string& name, size_t max_len)
    : name(name), max_len(max_len) {}

    Playlist& operator+=(const Song& other){
        if (songs.size() == max_len) return;
        songs.push_back(&other);
        return *this;
    }

    bool operator==(const Playlist& other){
        if (songs.size() != other.songs.size()) return false;
        for (size_t i = 0; i < songs.size(); i++){
            if (*songs[i] != *other.songs[i]) return false;
        }
        return true;
    }

private:
    string name;
    size_t max_len;
    vector<Song*> songs;
};



class PictureBook : public Book {
    friend ostream& operator<<(ostream& os, const PictureBook& rhs){
        os << "Title: " << rhs.get_title() << endl;
        os << "Num of Images: " << rhs.images.size() << endl;
        return os;
    }
public:
    PictureBook(const string& title)
    : Book(title) {}

    PictureBook(const PictureBook& other)
    : Book(other) {
        for (size_t i = 0; i < other.images.size(); i++){
            images.push_back(new Image(*other.images[i]));
        }
    }

    PictureBook& operator=(const PictureBook& other){
        if (this != &other){
            Book::operator=(other);
            for (size_t i = 0; i < images.size(); i++){
                delete images[i];
            }
            images.clear();
            for (size_t i = 0; i < other.images.size(); i++){
                images.push_back(new Image(*other.images[i]));
            }
        }
        return *this;
    }

    ~PictureBook(){
        for (size_t i = 0; i < images.size(); i++){
            delete images[i];
        }
        images.clear();
    }

private:
    vector<Image*> images;
};